#better model
#hopefully this model will use more solid maths
import cmath as cm
import math
import numpy as np
import matplotlib.ticker as tck
import matplotlib.pyplot as plt
from scipy.integrate import quad, dblquad
import scipy
#imaginary i
i=cm.sqrt(-1)
pi=np.pi
#phase of orbit
phi=np.arange(start=0, stop=2*pi, step=(2*pi)/360)
theta=phi+pi
#phi=0
#speed of light (cm/s)
c=2.9979*10**10
#permitivity of free space in cgs
epsilon=8.85418782*10**-12
#inclination
I=0.610865
#semi major axis (cm)
a=(1296.58*c)/np.sin(I)
#eccentricty
e=0.869931
#spindown luminosity in ergs/s
Lp=8*10**35
#mass outflow of be star in gs
M_1=(10**-8)*(1.989*10**33)*(3.154*10**7)
#velcotiy of stellar surface in cm/s
v_o=10**6
#fp fraction of sky (1)
fp=1
#fraction of sky fw
fw=0.125
#magnetization unitless
sigma=0.02
#mass and charge of electron in g
m_e=9.1*10**-34
e_c=1.6*10**-19
#pitch angle
alpha=pi/2
#realtivistic factor gamma
gamma=10**6
#kinetic energy of relativistic electrons
E=gamma*m_e*(c**2)
#spectral index
alpha_s=1.9
#kparsec in cm
kpc=3.086*10**21
#distance to system in kpc
D=2.6*kpc
#power law constant
k2=2*10**6

px=[0.0000796374457120316,0.00014178744537259044,0.0004494472104065501,0.004833185979082796,0.00860506118519621,
0.025487185471333655,0.14880576056262945,0.3595577683252391,1.397103472379879,5.615972406771629,22.574667300694117,
90.7439650384574,377.3554636042704,3199.999999999989]
py=[0.002462890320398578, 0.0013295759898850137, 0.00028501190286086, 0.000007847642926715469, 0.0000028129295761076214,
 7.401943651057152e-7, 3.079525004075132e-7, 4.168746010311817e-8, 8.483707120359404e-9, 1.1462015937257032e-9, 
 1.1977975827167921e-11, 7.509186629382716e-13, 1.310289034995999e-13, 2.7956514181875228e-15]

#labda factor
lambd=(Lp*fw)/(M_1*c*fp*v_o*(1+sigma))

p=(2*alpha_s)+1
#MeV to Hz
MeV=2.41799050402417E+20

#separation of binary
d=(a*(1-e**2))/(1+e*np.cos(0))
#distance to shock front from pulsar
r_s=((d)*(np.sqrt(lambd)))/(1+(np.sqrt(lambd)))
R_s=d-r_s
B=np.sqrt(sigma/1+sigma)*np.sqrt(Lp/c*fp)*(1/r_s)
#gyro freq
v_g=(e_c*B)/(2*pi*m_e)
#critical frequency
v_c=((E/(m_e*(c**2)))**2)*v_g

#frequency range in keV
v=np.arange(start=(0.001*MeV)/1000, stop=((10**4)*MeV)/1000, step=(0.01*MeV)/1000)
#xaxis points
v2=np.arange(start=0.001*MeV/MeV, stop=(10**4)*MeV/MeV, step=(0.01*MeV)/MeV)

#powerlaw spectrum in ph cm^-2 s^-1 keV^-1
spec=k2*(B**(alpha_s+1))*(v**(-alpha_s))

print("the critical frequency :",v_c, "\n1 MeV in Hz :", MeV )
g1=math.gamma((4.8/4)+(7/12))
g2=math.gamma((4.8/4)+(19/12))
Polar=((4.8+1)*g1)/(4*g2)
polar=(p+1)/(p+(7/3))
print("The polarization is :", '{0:.2f}'.format(Polar*100), "% \nthis is most likely wrong as random magnetic field")

# plotting the points 
#plt.plot(np.log(v), np.log(J), label="power law equation")
plt.plot(np.log10(px),np.log10(py),label="Data from Tavani, Arons")
plt.plot(np.log10(v2), np.log10(spec), label="spectrum of 1keV to 100keV at periastron")
plt.xlabel('log(MeV)')
plt.legend()
plt.ylabel('log(flux) (ph cm^-2 s^-1 keV^-1)')

# function to show the plot 
plt.show() 
