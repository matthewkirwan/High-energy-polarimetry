#thinshell model
#be careful of the iterator as changing it can affect speed.
import cmath as cm
import numpy as np
import matplotlib.ticker as tck
import matplotlib.pyplot as plt
from scipy.integrate import quad, dblquad
import scipy
import time
from datetime import datetime
startTime = datetime.now()

#constants
pi=np.pi
deg2rad=pi/180
#speed of light in cm
c=2.9979*10**10
#right accension
Ra=195.7*deg2rad
#declination
Dec=-75.54*deg2rad
#inclination
i=36*deg2rad
#degrees to periastron 138.678
omega=138.678*deg2rad
#angle of nearest acsending node 310
omicron=310*deg2rad

#semi major axis
a=1296.58*c/np.sin(i)
#eccentricity
e=0.869931


#electron number
k=2*10**6
#frequency 10kev
MeV=2.41799050402417E+20
v=0.01*MeV
#spectral index
alpha=0.5
#spindown luminosity
Lp=8*10**35
#velcotiy of stellar surface
vd=10**9
sigma=0.02

kpc=3.086*10**21
#distance to system in kpc
D=2.6*kpc
#e_o is a unit vector along the line of sight from the pulsar to earth.

#def Bphi(j,x):
#	f=[(r_s*np.cos(j)/np.sin(j))*np.sqrt(3*(1-j/np.tan(j))),\
#	-(r_s*np.sin(j)*np.sin(x)/np.sin(j))*np.sqrt(3*(1-j/np.tan(j))),\
#	(r_s*np.sin(j)*np.cos(x)/np.sin(j))*np.sqrt(3*(1-j/np.tan(j)))]
#	return f

#line1=dblquad(lambda x,j: (r_s*np.cos(j)\
#							/np.sin(j))*np.sqrt(3*(1-j/np.tan(j)))**2.9 ,0,3.14,\
#							lambda x:0, lambda x:2*pi)
#line2=dblquad(lambda x,j: (-r_s*np.sin(j)\
#							*np.sin(x)/np.sin(j))*np.sqrt(3*(1-j/np.tan(j)))**2.9 ,\
#							0,3.14,lambda x:0, lambda x:2*pi)
#line3=dblquad(lambda  x,j: (r_s*np.sin(j)\
#							*np.cos(x)/np.sin(j))*np.sqrt(3*(1-j/np.tan(j)))**2.9 \
#							,0,3.14,lambda x:0, lambda x:2*pi)
angle=np.linspace(0,2*pi,10)

LD=((2*alpha+1)+1)/((2*alpha+1)+7/3)

pulphi=0
binaryalp=[0*deg2rad,10*deg2rad,60*deg2rad,90*deg2rad]
theta1=10*deg2rad
theta2=10.1*deg2rad
theta3=(125*pi)/180
theta4=theta3 + pi
sigd=(35*pi)/180
mag=np.sqrt(sigma*c*Lp)
dist=1/(4*pi*D**2)
param=700
fw=1
fp=1
def d(theta):
	d=a*(1-e**2)/(1+e*np.cos(theta))
	return d

def r_s(theta):
	#mass outflow param kinda, check notes
	#disk=param*(np.exp(-(((t)-theta3)**2)/(2*sigd**2))+np.exp(-(((t)-theta4)**2)/(2*sigd**2)))
	massflow=100+param
	lambd=(40*fw)/(fp*massflow)
	#distance to shock from pulsar
	r_s=d(theta)/(1+1/np.sqrt(lambd))	
	return r_s

def R(zeta,theta):
	if zeta < pi/180:
		R=r_s(theta)
	elif zeta > 179*pi/180:
		zeta = 179*pi/180 
		R=(r_s(theta)/np.sin(zeta))*np.sqrt(3*(1-zeta/np.tan(zeta)))
	else:
		R=(r_s(theta)/np.sin(zeta))*np.sqrt(3*(1-zeta/np.tan(zeta)))
	return R
def Ru(zeta,theta):
	if zeta<0.5*pi/180:
		Ru=d(theta)-r_s(theta)
	elif zeta>179*pi/180:
		zeta = 179*pi/180
		Ru=np.sqrt(((d(theta)-R(zeta,theta)*np.cos(zeta))**2)+(R(zeta,theta)*np.sin(zeta))**2)
	else:
		Ru=np.sqrt(((d(theta)-R(zeta,theta)*np.cos(zeta))**2)+(R(zeta,theta)*np.sin(zeta))**2)
	return Ru 
def ang (binaryalp,pulsarphi,phi):
	ang=np.sqrt((np.cos(binaryalp)**2)+(np.sin(binaryalp)**2)*(np.cos(phi-pulsarphi)**2))
	return ang
def Tang (binaryalp,pulsarphi,phi):
	tang=(np.sin(binaryalp)**2)*np.cos(phi-pulsarphi)*np.sin(phi-pulsarphi)
	return tang
def mag ():
	mag=np.sqrt(sigma*c*Lp)
	return mag
def neta (theta2,theta1,x):
	neta=quad(lambda theta: x*np.tan(theta)/np.sin(theta),theta1, theta2)
	return neta[0]
def Bp (zeta,phi,theta):
	if zeta < pi/180 or zeta >179*pi/180:
		Bp = 0
	else:
		Bp=mag()*zeta*ang(binalp,pulphi,phi)/(vd*neta(calctheta2(theta),calctheta1(theta),(d(theta)-R(zeta,theta))))
	return Bp
def Bu (zeta,phi,theta):
	Bu=mag()*zeta*Tang(binalp,pulphi,phi)/\
	((np.sin(calctheta2(theta))-np.sin(calctheta1(theta)))*Ru(zeta,theta)*vd*ang(binalp,pulphi,phi))
	return Bu
def calctheta1(theta):	
	theta1=np.arctan((R(pi/2,theta)-50*10**6)/d(theta))
	return theta1
def calctheta2(theta):
	theta2=np.arctan((R(pi/2,theta)+50*10**6)/d(theta))
	return theta2
		
inclination=[20*deg2rad,40*deg2rad,50*deg2rad]
lumstar1=(4*pi*((4*10**11)**2)*(31500**4)*5.6704*10**-5)/(4*pi*D**2)
for var in range(0,1,1):
	
	for binalp in binaryalp:
		
		pol=[]
		flux=[]
		lumstar=[]
		for t in angle:
			t=np.around(t,6)
			#Bcalc=dblquad(lambda y, x:Bp(x,y,t)+Bu(x,y,t),1*pi/180,179*pi/180,lambda y: 0,2*pi)

			lumstar.append(lumstar1)
			
			B=np.sqrt(sigma/1+sigma)*np.sqrt(Lp/c*fp)*(1/r_s(t))

			Q=0
			U=0
			I=0
			#orbital angle or angle of observer
			e_o=np.array([1,0,1])
			#e_o=[np.sin(i)*np.cos(t-omega),np.sin(i)*np.sin(t-omega),np.cos(i)]
			#e_o=[np.cos(t),0,np.sin(t)]
		
			unit=np.sqrt(e_o[0]**2+e_o[1]**2+e_o[2]**2)
			print(round((t/(2*pi))*100),"% done")
			#if unit == 1.0:
				#print("e_o is a unit vector")
			#else:
				#print("WARNING: e_o is NOT a unit vector") 
			
			if e_o[1] == 0:
				nz=0
				phi=0
			else:
				nz=-e_o[1]/e_o[2]
				phi= np.arctan(e_o[1]/e_o[2])
			n=np.array([0,1,0])
			norb=np.array([0,1,nz])
			abn=np.sqrt(norb[0]**2+norb[1]**2+norb[2]**2)
			dis=d(t)
			for x in np.linspace(0,pi,30):
				x=np.around(x,6)
				Rs=R(x,t)
				etau=Rs*np.sin(x)
				if etau == 0:
					buy=100000000000*Rs
				else:
					buy=(dis-Rs*np.cos(x))/etau
					
				for y in np.linspace(0,2*pi,30):
					y=y+phi
					bphi=Bp(x,y,t)*(np.array([0,\
											np.cos(y),\
											np.sin(y)]))
					
					bu=Bu(x,y,t)*(np.array([1,\
										buy*np.sin(y),\
										-buy*np.cos(y)]))

					b=bphi+bu		

					e1=np.cross(b,e_o)
					abe=np.sqrt(e1[0]**2+e1[1]**2+e1[2]**2)
					
					if abn == 0 or abe == 0:
						kai=0
					else:
						kai=np.arccos(np.dot(e1,norb)/(abe*abn))
					jv=k*((Bu(x,y,t)+Bp(x,y,t))**(alpha+1))*v**-alpha
					Ie=jv
					Qe=LD*jv*np.cos(2*kai)
					Ue=LD*jv*np.sin(2*kai)
					if np.isnan(Ie) == True:
						I=I+0
					else:
						I=I+Ie
					if np.isnan(Qe) == True:
						Q=Q+0
					else:
						Q=Q+Qe
					if np.isnan(Ue) == True:
						U=U+0
					else:
						U=U+Ue
					
			flux.append(I)
			polar=np.sqrt(Q**2+U**2)/I
		
			pol.append(polar)
		plt.figure(var)
		if binalp == 0*deg2rad:
			plt.plot(angle*180/pi,pol,"r",label="alpha=0, pulphi= 0")
		elif binalp == 10*deg2rad:
			plt.plot(angle*180/pi,pol,"r--",label="alpha=10, pulphi= 0")
		elif binalp == 60*deg2rad:
			plt.plot(angle*180/pi,pol,"g",label="alpha=60, pulphi= 0")
		elif binalp == 90*deg2rad:
			plt.plot(angle*180/pi,pol,"g--",label="alpha=90, pulphi= 0")
		plt.legend()
		plt.xlabel('angle of observer')
		plt.ylabel('degree of polarization')
		plt.ylim(0,1)


		#plt.figure(var)
		#if pulphi == 0*deg2rad and binalp != 0:
		#	plt.plot(angle*180/pi,pol,"r",label="alpha=45, pulphi= 0")
		#elif pulphi == 30*deg2rad:
		#	plt.plot(angle*180/pi,pol,"r--",label="alpha=45, pulphi= 0")
		#elif pulphi == 60*deg2rad:
		#	plt.plot(angle*180/pi,pol,"g",label="alpha=45, pulphi= 60")
		#elif pulphi == 80*deg2rad:
		#	plt.plot(angle*180/pi,pol,"g--",label="alpha=45, pulphi= 80")
		#elif pulphi == 90*deg2rad:
		#	plt.plot(angle*180/pi,pol,"b",label="alpha=45, pulphi= 90")
		#plt.legend()
		#plt.xlabel('angle of observer')
		#plt.ylabel('degree of polarization')
		#plt.ylim(0,1)


print("time taken to execute: ",datetime.now() - startTime)
plt.show()

